#cloud-config

# This is the user-data configuration file for cloud-init. By default this sets
# up an initial user called "ubuntu" with password "DS1Rocks", which must be
# changed at first login. However, many additional actions can be initiated on
# first boot from this file. The cloud-init documentation has more details:
#
# https://cloudinit.readthedocs.io/
#
# Some additional examples are provided in comments below the default
# configuration.
users:
- name: ubuntu
  gecos: DS1 Rocks
  primary_group: ubuntu
  shell: /bin/bash
  sudo: ALL=(ALL) NOPASSWD:ALL
  groups: adm, dialout, cdrom, floppy, sudo, audio, dip, video, plugdev, netdev, lxd
  chpasswd: {expire: False}
  lock_passwd: false
  # Password DS1Rocks
  passwd: $6$rounds=656000$gaNyeryeb4sncOl4$VLElRoLJQ7BQZBGvy.Whh77bxphIJYOFjwrtsJHpg/x6ZTZ8R6Iep8EjDvPaLmnkfHvNIkA/PUYIGwEPDgc9F/
  ssh_import_id: None
  ssh_pwauth: true

# Enable password authentication with the SSH daemon
ssh_pwauth: true
## Add users and groups to the system, and import keys with the ssh-import-id
## utility
groups:
- ubuntu: [ubuntu]
- docker: [docker]

hostname: rancher-mgmt
manage_etc_hosts: true
locale: "en_US.UTF-8"
timezone: "America/New York"

apt:
 preserve_sources_list: true
 sources:
   docker.list:
     source: "deb [arch=arm64] https://download.docker.com/linux/ubuntu $RELEASE stable"
     keyid: 0EBFCD88
     filename: docker.list

## Write arbitrary files to the file-system (including binaries!)
write_files:
  - path: /etc/docker/daemon.json
    content: |
      {
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m"
        },
        "storage-driver": "overlay2",
        "labels": [ "os=linux", "arch=arm64" ],
        "experimental": true
      }
    permissions: '0644'
    owner: root:root
  - path: /etc/modules-load.d/k8s.conf
    content: |
      br_netfilter
    permissions: '0644'
    owner: root:root
  - path: /etc/issue
    content: |
        Ubuntu \n \l

        eth0: \4{eth0}
        wlan0: \4{wlan0}
    permissions: '0644'
    owner: root:root
  - path: /etc/exports
    content: |
      # /etc/exports: the access control list for filesystems which may be exported
      #		to NFS clients.  See exports(5).
      #
      # Example for NFSv2 and NFSv3:
      # /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)
      #
      # Example for NFSv4:
      # /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)
      # /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)
      #
      /srv/k8s	*(rw,no_root_squash,insecure,async,no_subtree_check,anonuid=1001,anongid=1001)
    permissions: '0644'
    owner: root:root
  - path: /home/ubuntu/.smbcredentials
    content: |
      username=mendoj
      password=M3__asians19
    permissions: '0777'
    owner: ubuntu:ubuntu

# set up mount points
# 'mounts' contains a list of lists
#  the inner list are entries for an /etc/fstab line
#  ie : [ fs_spec, fs_file, fs_vfstype, fs_mntops, fs-freq, fs_passno ]
#
# default:
# mounts:
#  - [ ephemeral0, /mnt ]
#  - [ swap, none, swap, sw, 0, 0 ]
#
# in order to remove a previously listed mount (ie, one from defaults)
# list only the fs_spec.  For example, to override the default, of
# mounting swap:
# - [ swap ]
# or
# - [ swap, null ]
#
# - if a device does not exist at the time, an entry will still be
#   written to /etc/fstab.
# - '/dev' can be ommitted for device names that begin with: xvd, sd, hd, vd
# - if an entry does not have all 6 fields, they will be filled in
#   with values from 'mount_default_fields' below.
#
# Note, that you should set 'nofail' (see man fstab) for volumes that may not
# be attached at instance boot (or reboot).
#
mounts:
#  - [ ephemeral0, /mnt, auto, "defaults,noexec" ]
#  - [ sdc, /opt/data ]
#  - [ xvdh, /opt/data, "auto", "defaults,nofail", "0", "0" ]
#  - [ dd, /dev/zero ]
 - [ //jujudozanas/plex, /media/plex, cifs, "credentials=/home/ubuntu/.smbcredentials,iocharset=utf8,uid=1000,gid=1000", "0", "0"]

## Update apt database and upgrade packages on first boot
package_update: true
package_upgrade: true
package_reboot_if_required: true
# Install additional packages on first boot
#
# Default: none
#
# if packages are specified, this apt_update will be set to true
#
# packages may be supplied as a single package name or as a list
# with the format [<package>, <version>] wherein the specifc
# package version will be installed.
 
## Install additional packages on first boot
packages:
  - curl
  - docker-ce
  - docker-ce-cli
  - containerd.io
  - gnupg2
  - iotop
  - jq
  - keyutils
  - lsb-release
  - mlocate
  - net-tools
  - nfs-kernel-server
  - nfs-common
  - ntpdate
  - python3
  - python3-dev
  - python3-pip
  - python3-setuptools 
  - rpcbind
  - rsync
  - watchdog
  - software-properties-common
  - sudo
  - tzdata
  - vim
  - wget
  - cifs-utils
  - nodejs
  - nvm

bootcmd:
  - mkdir -p /srv/k8s

runcmd:
  - [ /usr/sbin/ntpdate, pool.ntp.org ]
  - [ sudo, sed, -i, '$ s/$/ cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1 swapaccount=1/', /boot/firmware/cmdline.txt ]
  - sudo docker volume create portainer_data
  - sudo docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce
  - sudo mkdir -p /media/plex
  - usermod -a -G docker ubuntu
  - mkdir -p /srv/rancher
  - sudo systemctl enable nfs-server
  - sudo systemctl start nfs-server
  - sudo systemctl enable docker
  - sudo systemctl start docker
  - sudo curl -L --fail https://raw.githubusercontent.com/linuxserver/docker-docker-compose/master/run.sh -o /usr/local/bin/docker-compose
  - sudo chmod +x /usr/local/bin/docker-compose
  - sudo docker run --privileged -d --restart=unless-stopped --name rancher -p 80:80 -p 443:443 --mount type=bind,source=/srv/rancher,target=/var/lib/rancher rancher/rancher:latest

## poweroff or reboot system after finished
# default: none
#
# power_state can be used to make the system shutdown, reboot or
# halt after boot is finished.  This same thing can be acheived by
# user-data scripts or by runcmd by simply invoking 'shutdown'.
# 
# Doing it this way ensures that cloud-init is entirely finished with
# modules that would be executed, and avoids any error/log messages
# that may go to the console as a result of system services like
# syslog being taken down while cloud-init is running.
#
# If you delay '+5' (5 minutes) and have a timeout of
# 120 (2 minutes), then the max time until shutdown will be 7 minutes.
# cloud-init will invoke 'shutdown +5' after the process finishes, or
# when 'timeout' seconds have elapsed.
#
# delay: form accepted by shutdown.  default is 'now'. other format
#        accepted is '+m' (m in minutes)
# mode: required. must be one of 'poweroff', 'halt', 'reboot'
# message: provided as the message argument to 'shutdown'. default is none.
# timeout: the amount of time to give the cloud-init process to finish
#          before executing shutdown.
# condition: apply state change only if condition is met.
#            May be boolean True (always met), or False (never met),
#            or a command string or list to be executed.
#            command's exit code indicates:
#               0: condition met
#               1: condition not met
#            other exit codes will result in 'not met', but are reserved
#            for future use.
#

power_state:
  mode: reboot
  message: Bye Bye
  timeout: 30
  condition: True

# final_message
# default: cloud-init boot finished at $TIMESTAMP. Up $UPTIME seconds
# this message is written by cloud-final when the system is finished
# its first boot
final_message: "The system is finally up, after $UPTIME seconds"
